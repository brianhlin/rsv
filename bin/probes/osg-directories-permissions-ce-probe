#!/usr/bin/env perl

###############################################################################
##
## Copyright 2009, The Trustees of Indiana University. 
##
## Open Science Grid Operations Team, Indiana University
## Original Author: Arvind Gopu (http://peart.ucs.indiana.edu)
##
## This Perl script tests if a remote host has various OSG directories
##  setup correctly
## Type ./osg-directories-probe -h for more information
##
## REQUIRES
##  'RSV::Probe_Base'
##
################################################################################

######## Perl modules to use ######################################
use strict;
use RSVProbeBase;

######## Retrieve Global variables ################################
## And alias to RSV::Probe_Base variables
our %o;         *o         = \%RSVProbeBase::o;      
our %metric;    *metric    = \%RSVProbeBase::metric;

&RSVProbeBase::Init();
&RSVProbeBase::Run();

################################################################################
## Main Program ends ##
################################################################################


################################################################################
## Local Sub-Routines
################################################################################

sub Init {

    &RSVProbeBase::Set_MetricName ("org.osg.general.osg-directories-CE-permissions");

    ## Pass "status" or "performance" depending on metric type
    &RSVProbeBase::Set_MetricType ("status");
    &RSVProbeBase::Set_ServiceType ("OSG-CE");
    &RSVProbeBase::Set_ServiceVersion (">= OSG CE 0.8.0");
    &RSVProbeBase::Set_ProbeType ("OSG-CE");

    ## Should automating tools run this probe on above probeType by default?
    &RSVProbeBase::Set_EnableByDefault ("true");
    
    ## Unix cron type metric interval
    &RSVProbeBase::Set_MetricInterval ("37 * * * *");

    ## Define this value from RCS/SVN version
    ## What version of the WLCG specification does this probe conform to?
    &RSVProbeBase::Set_ProbeRevision ('3.0');
    &RSVProbeBase::Set_ProbeSpecVersion ("0.91");

    ## Basic intro for the probe; This string will be used by Print_Usage ()
    &RSVProbeBase::Set_ProbeHelpIntro 
	("Probe to check if permissions are set correctly on important user-accesible\n".
	 " OSG directories defined by various common OSG environment variables.\n".
	 "\nMetric org.osg.general.osg-directories-CE-permissions on the OSG CE:\n".
	 "\t OSG_LOCATION (Required;    bad permissions = CRITICAL)\n".
	 "\t OSG_APP      (Required;    bad permissions = WARNING)\n".
	 "\t OSG_DATA     (Recommended; bad permissions = WARNING)");

    ## Additional options to print in Usage info used by Print_Usage ()
    &RSVProbeBase::Set_ProbeHelpOptions
	(" [--worker-script-file <file>     Worker script file to use.");

    ## Uncomment if you want additional command line options
     &RSVProbeBase::Extra_CLI_Option ("worker-script-file=s","osgdirectoriesWorkerScriptFile");

    ## Uncomment if you do not want detailsData to be trimmed to $o{'detailsDataMaxLength}
    &RSVProbeBase::Set_DetailsDataTrim ("False");
}


sub Run {

    my ($error_flag, $warning_flag) = 0;
    my ($directories_to_test, $tmp_string)  = "";
    my ($osg_directory_name, $osg_directory_path, $osg_directory_permission) = undef;

    &RSVProbeBase::Check_Gram_Authentication ();
    
    ## If we can authenticate, then stage and run worker script using globus
    $o{'callingRoutine'} = "$o{'probeName'}::Run ()";


    $directories_to_test = "\'";
    foreach my $directory (sort keys %{$o{'osgDirectory'}}) {
	$directories_to_test .= "$directory ";
    }
    $directories_to_test .= "\'";

    &RSVProbeBase::Globus_Job_Run (" -s $o{'osgdirectoriesWorkerScriptFile'} $directories_to_test type-permission 2>&1 ", "backtick");
    &RSVProbeBase::Parse_Xml ("Attempted to get directory permission information using Globus job -s $o{'osgdirectoriesWorkerScriptFile'} $directories_to_test type-permission 2>&1");

    foreach my $directory (@{$o{'cmdOutHash'}{'StdOut'}{'Directory'}}) {

	## $directory is a reference to hash; derefencing directly
	$osg_directory_name       = $directory->{'Name'};
	$osg_directory_path       = $directory->{'Path'};
	$osg_directory_permission = $directory->{'Permission'};

	&RSVProbeBase::Verbose ("Checking if [$osg_directory_permission] exists in [$o{'osgDirectory'}{$osg_directory_name}{'permission'}]\n");
        #     if ($osg_directory_permission =~ /$o{'osgDirectory'}{$osg_directory_name}{'permission'}/) {
	if ($o{'osgDirectory'}{$osg_directory_name}{'permission'} =~ /$osg_directory_permission/) {
	    $tmp_string .= "\$$osg_directory_name=$osg_directory_path is defined properly and has the required permissions ($o{'osgDirectory'}{$osg_directory_name}{'permission'} expected; $osg_directory_permission detected)\n";
	 } 
	else { 
	    ## Increment error flag - if bad for CRITICAL dir; o/w warning flag
	    if ($o{'osgDirectory'}{$osg_directory_name}{'isCritical'} eq "true") {
		$error_flag++;
	    } else {
		$warning_flag++ ; 
	    }

	    ## Also set detailsData		    
	    $tmp_string .= "\$$osg_directory_name=$osg_directory_path appears to not have the expected permissions $o{'osgDirectory'}{$osg_directory_name}{'permission'} expected; $osg_directory_permission detected; Is this Critical? $o{'osgDirectory'}{$osg_directory_name}{'isCritical'})\n";
	}
    }

    ## If error/warm flag is non-zero, edit detailsData and set metric
    ## First set WARNING status; if there are errors then the next if branch
    ##  will set the status to CRITICAL
    &RSVProbeBase::Set_Summary_Metric_Results(0,"$tmp_string");
    &RSVProbeBase::Set_Summary_Metric_Results(1,"$warning_flag WARNING(S)!\n$tmp_string") if ($warning_flag != 0);
    &RSVProbeBase::Set_Summary_Metric_Results(2,"$error_flag ERROR(S)!\n$tmp_string")     if ($error_flag != 0);
    &RSVProbeBase::Print_Metric();
}
