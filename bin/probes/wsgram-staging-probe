#!/usr/bin/env perl

###############################################################################
##
## Copyright 2009, The Trustees of Indiana University. 
##
## Open Science Grid Operations Team, Indiana University
## Original Author: Arvind Gopu (http://peart.ucs.indiana.edu)
##
## Type ./wsgram-staging-probe -h for information
##
## REQUIRES
##  'RSV::Probe_Base'
##
################################################################################

######## Perl modules to use ######################################
use strict;
use RSVProbeBase;

######## Retrieve Global variables ################################
## And alias to RSV::Probe_Base variables
our %o;         *o         = \%RSVProbeBase::o;      
our %metric;    *metric    = \%RSVProbeBase::metric;

&RSVProbeBase::Init();
&RSVProbeBase::Run();

################################################################################
## Main Program ends ##
################################################################################


################################################################################
## Local Sub-Routines
################################################################################

sub Init {

    &RSVProbeBase::Set_MetricName ("org.osg.globus.wsgram-staging");

    ## Pass "status" or "performance" depending on metric type
    &RSVProbeBase::Set_MetricType ("status");
    &RSVProbeBase::Set_ServiceType ("OSG-CE");
    &RSVProbeBase::Set_ServiceVersion (">= OSG CE 1.0.0");
    &RSVProbeBase::Set_ProbeType ("OSG-CE-WS");

    ## Should automating tools run this probe on above probeType by default?
    &RSVProbeBase::Set_EnableByDefault ("true");
    
    ## Unix cron type metric interval
    &RSVProbeBase::Set_MetricInterval ("28 * * * *");

    ## Define this value from RCS/SVN version
    ## What version of the WLCG specification does this probe conform to?
    &RSVProbeBase::Set_ProbeRevision ('3.0');
    &RSVProbeBase::Set_ProbeSpecVersion ("0.91");

    ## Basic intro for the probe; This string will be used by Print_Usage ()
    &RSVProbeBase::Set_ProbeHelpIntro 
	("Probe to check if WS-GRAM staging works on a remote host.");

    ## Additional options to print in Usage info used by Print_Usage ()
    ##    &RSVProbeBase::Set_ProbeHelpOptions ("--wsgram-foo <port>");

    ## Uncomment if you want additional command line options
    ##    &RSVProbeBase::Extra_CLI_Option ("wsgram-foo|p=i","wsgramFoo");

    ## Uncomment if you do not want detailsData to be trimmed to $o{'detailsDataMaxLength}
    ## &RSVProbeBase::Set_DetailsDataTrim ("False");
}


sub Run {
    ## Check if we can authenticate to host using proxy
    &RSVProbeBase::Check_Gram_Authentication ();

    ## If we can authenticate, then some wsgram action now ...
    &Do_WSGRAM_Submit ();

    ## Print metric, and we're all done!
    &RSVProbeBase::Print_Metric ();
}





sub Do_WSGRAM_Submit {

    $o{'callingRoutine'} = "Do_WSGRAM_SUBMIT()";

    ## Comment from ag to Charles: we already handle non-standard port number
    ##  in serviceUri
    ##    my $contact_string = $o{'serviceUri'}; ## or as shown below
    my $contact_string = $o{'hostName'};
    $contact_string .= ":$o{'portNumber'}" if ( $o{'portNumber'} );

    my $staging_file = $o{'slashTmp'}. 
	"/$o{'timestampUnixSeconds'}-$$-staging.rsl";
    open RSLFILE, ">$staging_file";
    print RSLFILE '<?xml version="1.0" encoding="UTF-8"?>\n';
    print RSLFILE '<job>\n';
    print RSLFILE '<executable>/bin/env</executable>\n';
    print RSLFILE '<stdout>env.out</stdout>\n';
    print RSLFILE '<fileCleanUp>\n';
    print RSLFILE '   <deletion>\n';
    print RSLFILE '      <file>file:///${GLOBUS_USER_HOME}/env.out</file>\n';
    print RSLFILE '   </deletion>\n';
    print RSLFILE '</fileCleanUp>\n';
    print RSLFILE '</job>\n';
    close RSLFILE;

    my $wsgram_cmd = "$o{'globusrunwsCmd'} -submit -F $contact_string -S -f $staging_file 2>&1";
    
    &RSVProbeBase::Run_Command ($wsgram_cmd, "backtick");
    
    &RSVProbeBase::Exit_Error 
	(2, "ERROR: Cannot run staging job to $contact_string... Bailing now. Actual error message was: $o{'cmdOut'}") 
	if ($o{'cmdExitValue'} !=0);

    system("/bin/rm $staging_file");
}
