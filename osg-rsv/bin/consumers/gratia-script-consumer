#!/usr/bin/env perl
use strict;
use warnings;

use POSIX;

# Declare this early
my $output_fh;

# Turn autoflush on
$|=1;

# Timeout for executing python scripts
# Gratia will time out in 500 seconds, so go just over that in case that timeout fails
my $timeout = 600;

##
## Make sure we have VDT_LOCATION set in our environment
##
my $VDT_LOCATION = $ENV{VDT_LOCATION};
die("ERROR: The VDT_LOCATION environment variable is not set") unless ($VDT_LOCATION);
die("ERROR: VDT_LOCATION is set to an non-existing location '$VDT_LOCATION'") unless (-e $VDT_LOCATION);

##
## Some important directories
##
my $PROBE_GRATIA_DIRECTORY = "$VDT_LOCATION/osg-rsv/output/gratia";
my $FAILED_PROBES_DIR = "$VDT_LOCATION/osg-rsv/output/failed-gratia-scripts";

##
## If this is set to true, we'll exit
##
my $CONSUMER_DONE = 0;

##
## Allow ourselves to catch signals
##
$SIG{TERM} = \&catch_term;


##
## If we print to STDOUT and STDERR, Condor will overwrite the file everytime the script executes.
## So we'll use a file to record all output, and rotate it
##
my $output_file = "$VDT_LOCATION/osg-rsv/logs/consumers/gratia-script-consumer.output";
open($output_fh, ">>", $output_file) or die("Cannot open '$output_file' for output: $!");


##
## Main loop
##
my @files = glob("$PROBE_GRATIA_DIRECTORY/*");
debug_print("Beginning execution, found " . scalar(@files) . " files");
foreach my $file (@files) {
    last if($CONSUMER_DONE);
    chmod(0755, $file);
    debug_print("Executing script '$file'");

    my $exit_status;
    eval {
        # Setup a timeout on the script.
        local $SIG{ALRM} = sub { die "alarm\n" }; # NB: \n required
        alarm $timeout;
        $exit_status = system($file);
        alarm 0;
    };
    if ($@) {
        die_nice($@) unless $@ eq "alarm\n";   # propagate unexpected errors
        debug_print("ERROR: Script timed out after $timeout seconds ($file)\n");

        # If one script times out, they probably all will since it's likely a collector issue
        # We'll just bail out, and come back on the next invocation of this script.
        exit 0;
    }
    
    if ($exit_status) {
        debug_print("The script '$file' exited with value " . ($exit_status >> 8) . "\n");
        system("mv $file $FAILED_PROBES_DIR");
    }
    else {
        unlink($file);
    }
}

debug_print("Finished execution\n");
close(OUT);
exit 0;

## -----------------------------------------------------------
## debug_print
## Add a timestamp to messages
## -----------------------------------------------------------
sub debug_print {
   my ($str) = @_;
   my $msg = strftime("%m-%d-%Y %H:%M:%S - $str\n" , localtime);
   print $msg;

   # Just in case this hasn't been opened yet
   if(defined($output_fh)) {
       print $output_fh $msg;
   }
}

## -----------------------------------------------------------
## catch_term
## SIGTERM handler - allow the consumer to exit gracefully
## -----------------------------------------------------------
sub catch_term {
   debug_print("Caught SIGTERM! Exiting...");
   $CONSUMER_DONE = 1;
   return;
}


## -----------------------------------------------------------
## die_nice
## Record the message in the output file before die'ing
## -----------------------------------------------------------
sub die_nice {
    my $message = shift;
    print OUT debug_print($message);
    close(OUT);
    die $message;
}
