#!/usr/bin/env perl

use strict;
use warnings;
use Getopt::Long;
use RSVMetric;

my $warning_hours = 168;
my $warning_seconds = $warning_hours * 60 * 60;

my $OPT_METRIC;
my $OPT_HOST;

print_output_header();

GetOptions("m=s"        => \$OPT_METRIC,
           "u=s"        => \$OPT_HOST,
           "help|usage" => \&usage);

my $openssl = which("openssl");
if(not $openssl) {
    print "CRITICAL\n";
    print "openssl is not in PATH\n";
    dump_debug();
    exit 0;
}

my %certs = ( "org.osg.local.hostcert-expiry" => "/etc/grid-security/hostcert.pem",
              "org.osg.local.httpcert-expiry" => "/etc/grid-security/http/httpcert.pem",
              #"org.osg.local.rsvcert-expiry"  => "/etc/grid-security/rsvcert.pem",
);

my $cert = $certs{$OPT_METRIC};

if(!-e $cert) {
    print "CRITICAL\n";
    print "The certificate '$cert' does not exist or your RSV user does not have permission to read it.\n";
    exit 0;
}

my $openssl_cmd = "openssl x509 -in $cert -noout -checkend $warning_seconds 2>&1";
my $out = `$openssl_cmd`;
my $ret = $? >> 8;

if($ret == 0) {
    print "OK\n";
    print "Certificate '$cert' is valid for at least $warning_hours more hours.\n";
    exit 0;
}
elsif ($ret == 1) {
    my $valid = `openssl x509 -in $cert -noout -enddate`;
    chomp $valid;

    print "CRITICAL\n";
    print "Certificate '$cert' is expiring/expired.  It is valid until: $valid\n";
    exit 0;
}
else {
    print "CRITICAL\n";
    print "Error running openssl command ($openssl_cmd).  Output:\n$out\n";
    dump_debug();
    exit 0;
}

exit 0;


sub usage {
    print STDERR "Usage: $0\n";
    print STDERR "\t-m <metric>\n";
    exit 1;
}
