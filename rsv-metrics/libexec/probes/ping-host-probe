#!/usr/bin/env perl

use strict;
use warnings;

use Getopt::Long;

my $OPT_HOSTNAME;
my $OPT_TIMEOUT = 3;
my $OPT_COUNT = 1;

GetOptions("u=s"             => \$OPT_HOSTNAME,
           "ping-timeout=i"  => \$OPT_TIMEOUT,
	   "ping-count=i"    => \$OPT_COUNT,
           "help|usage"      => \&usage);

print "RSV BRIEF RESULTS:\n";

if(not $OPT_HOSTNAME) {
    print "CRITICAL\n";
    print "No hostname was supplied to $0\n";
    exit 1; # Probe was invoked wrong, so give an error on exit status
}

my $ping = which("ping");
if(not $ping) {
    print "CRITICAL\n";
    print "ping is not in PATH\n";
    dump_debug();
    exit 0;
}

my $ping_cmd = "ping -q -W $OPT_TIMEOUT -c $OPT_COUNT $OPT_HOSTNAME 2>&1";
my $out = `$ping_cmd`;
my $ret = $? >> 8;

if($ret == 0) {
    print "OK\n";
    print "Host $OPT_HOSTNAME is alive and responding to pings.\n";
}
elsif ($ret == 1) {
    print "CRITICAL\n";
    print "Host $OPT_HOSTNAME is alive but not responding to pings.\n";
}
elsif ($ret == 2) {
    print "CRITICAL\n";
    print "Unable to ping host $OPT_HOSTNAME\n";
    dump_debug();
}
else {  ## Unknown status here
    print "CRITICAL\n";
    print "ERROR: Cannot execute ping command $ping_cmd\n";
}

exit 0;


sub which {
    my ($exe) = @_;

    foreach my $dir (split(/:/, $ENV{PATH})) {
        if (-x "$dir/$exe") {
            $dir =~ s|/+$||;  # Trim trailing slash on dir
	    return "$dir/$exe";
        }
    }
    return "";
}

sub dump_debug {
    print STDERR `/usr/bin/env`;
    return;
}
