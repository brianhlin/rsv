#!/usr/bin/env perl

use strict;
use warnings;
use Getopt::Long;
use File::Basename;
use RSVMetric;

print_output_header();

my $OPT_HOSTNAME;
my $OPT_METRIC;
my $OPT_SRM_DEST_DIR;
my $OPT_SRM_WEBSERVICE_PATH;
my $OPT_SRM_PROTOCOL_VERSION = 2;

GetOptions("u=s"                    => \$OPT_HOSTNAME,
           "m=s"                    => \$OPT_METRIC,
           "srm-destination-dir=s"  => \$OPT_SRM_DEST_DIR,
           "srm-webservice-path=s"  => \$OPT_SRM_WEBSERVICE_PATH,
           "srm-protocol-version=s" => \$OPT_SRM_PROTOCOL_VERSION,
           "help|usage"             => \&usage);

#
# Validate options
#

if(not $OPT_HOSTNAME) {
    print "CRITICAL\n";
    print "No hostname was supplied to $0\n";
    exit 1; # Probe was invoked wrong, so give an error on exit status
}

if(not $OPT_SRM_DEST_DIR) {
    print "CRITICAL\n";
    print "You must specify the SRM remote directory using the --srm-destination-dir flag.\n";
    exit 1; # Probe was invoked wrong, so give an error on exit status
}

if(not $OPT_SRM_WEBSERVICE_PATH) {
    print "CRITICAL\n";
    print "You must specify the SRM webservice path (e.g. srm/v2/server) using the --srm-webservice-path flag.\n";
    exit 1; # Probe was invoked wrong, so give an error on exit status
}

find_binaries("srm-copy", "srm-ls", "srm-rm");

# 
# Transfer to the remote server
#

my $local_file = "/usr/share/rsv/probe-helper-files/storage-probe-test-file";
my $local_uri = "file://$local_file";

if(!-e $local_file) {
    print "CRITICAL\n";
    print "The helper file is missing from '$local_file'.\n";
    print "Your RSV installation may be incomplete or corrupt.\n";
    exit 0;
}

my $time = time;
my $remote_file = basename($local_file) . ".$time.$$";
my $remote_uri = "srm://$OPT_HOSTNAME/$OPT_SRM_WEBSERVICE_PATH?SFN=$OPT_SRM_DEST_DIR/$remote_file";

# TODO - might need '-x509_user_proxy=' included in here
my $srm_copy_cmd = "srm-copy $local_uri $remote_uri 2>&1";
my $out = `$srm_copy_cmd`;
if($? != 0) {
    print "CRITICAL\n";
    print "Failed to transfer file to remote server.\n";
    print "Command: $srm_copy_cmd\n";
    print "Output from srm-copy:\n$out\n";
    exit 0;
}
else {
    print STDERR "Successful transfer to remote server.\n";
    print STDERR "Command: $srm_copy_cmd\n";
    print STDERR "Output from srm-copy:\n$out\n\n";
}

#
# Transfer file back from remote server
#

my $new_local_file = "/tmp/$remote_file";
my $new_local_uri = "file://$new_local_file";

# TODO - might need '-x509_user_proxy=' included in here
$srm_copy_cmd = "srm-copy $remote_uri $new_local_uri 2>&1";
$out = `$srm_copy_cmd`;
if($? != 0) {
    print "CRITICAL\n";
    print "Successful transfer to remote server.\n";
    print "Failed to transfer file from remote server.\n";
    print "Command: $srm_copy_cmd\n";
    print "Output from srm-copy:\n$out\n";
    cleanup_files();
    exit 0;
}
else {
    print STDERR "Successful transfer from remote server.\n";
    print STDERR "Command: $srm_copy_cmd\n";
    print STDERR "Output:\n$out\n\n";
}


# 
# Compare files
#
$out = `diff $local_file $new_local_file`;
if($? != 0) {
    print "CRITICAL\n";
    print "Successful transfer to remote server.\n";
    print "Successful transfer from remote server.\n";
    print "The file that was returned from the remote server does not match the original file.\n";
    print "Diff:\n$out\n";
    cleanup_files();
    exit 0;
}


# 
# List file from remote host
#

# The original srmcp-srm-probe did this, so we'll preserve this behavior
my $srm_ls_cmd = "srm-ls $remote_uri 2>&1";
$out = `$srm_ls_cmd`;
if($? != 0) {
    print "CRITICAL\n";
    print "Successful transfer to remote server.\n";
    print "Successful transfer from remote server.\n";
    print "Original file and received file are identical.\n";
    print "The remote file could not be listed using srm-ls.\n";
    print "Command: $srm_ls_cmd\n";
    print "Output:\n$out\n";
    cleanup_files();
    exit 0;
}

print "OK\n";
print "Successful transfer to remote host.\n";
print "Successful transfer from remote host.\n";
print "Original file and received file are identical.\n";
print "Remote file was properly listed using srm-ls.\n";
cleanup_files();
exit 0;


sub usage {
    print STDERR "Usage: $0\n";
    print STDERR "\t-u <hostname>\n";
    print STDERR "\t-m <metric>\n";
    exit 1;
}

sub cleanup_files {
    # First the local file
    if($new_local_file and -e $new_local_file) {
        if(not unlink($new_local_file)) {
            print STDERR "Failed to unlink existing local file '$new_local_file': $!";
        }
    }

    # And also the remote file
    my $out = `srm-rm $remote_uri`;
    if($? != 0) {
        print STDERR "Failed to remove remote file '$remote_uri'.  Output:\n$out\n";
    }
}
